image: growingdata/hypermodel-cicd:gitlab-0.1.75

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  CLUSTER_ZONE: australia-southeast1-a
  GIT_SUBMODULE_STRATEGY: normal # do not recursively set up submodules.  We have istio-cni as a submodule.
  GIT_DEPTH: "3"

stages:
  - build
  - test
  - test-demo-crashed
  - deploy
  - release
  - infra

before_script:
  - export GCR_PROJECT="hyper-model-ops"
  - export GCP_CLUSTER="$GCP_DEV_CLUSTER"

  # This is our GCR (private) image repo for the current HM container
  - export IMAGE_GCR_HYPERMODEL="gcr.io/hyper-model-ops/hypermodel"

  # These are our release / public containers
  - export IMAGE_DOCKERHUB_HYPERMODEL_BASE="growingdata/hypermodel-base"
  - export IMAGE_DOCKERHUB_HYPERMODEL_CICD="growingdata/hypermodel-cicd"
  - export IMAGE_DOCKERHUB_HYPERMODEL="growingdata/hypermodel"

  # Demo / Docker Images
  - export DOCKERHUB_DEMOCRASHED="growingdata/demo-crashed"

  # Setup permissions for Docker to do all the things that need doing
  - echo "$GCR_CONTAINER_WRITER_KEY" > ./gcr-container-writer.json

  - gcloud config set project $GCR_PROJECT
  - gcloud auth activate-service-account --key-file ./gcr-container-writer.json
  - gcloud auth configure-docker

  - VERSION=$(cat ./version.txt)

#######################################
####  BUILD
#######################################
build-docs:
  # Generate documentation using sphinx (which is also a pseudo build step)
  stage: build
  script:
    - echo "Building.documentation.."
    # Make sure that we install our package first
    - pip install -e ./src/hyper-model
    # Make the documentation
    - cd src/hyper-model/docs
    - make html

#######################################
####  DEPLOY
#######################################
build-image-hyper-model:
  stage: deploy
  dependencies:
    - build-docs
  script:
    - echo "Building..."
    - docker build -t $IMAGE_GCR_HYPERMODEL:$CI_COMMIT_REF_SLUG -f ./infra/docker/hypermodel.Dockerfile ./src/hyper-model
    - docker push $IMAGE_GCR_HYPERMODEL:$CI_COMMIT_REF_SLUG

#######################################
####  TEST DEMO APPS
#######################################
demo-crashed-build:
  stage: test-demo-crashed
  script:
    - docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD docker.io
    - docker build -t $DOCKERHUB_DEMOCRASHED:$CI_COMMIT_SHA -f ./demo/car-crashes/crashed.Dockerfile .
    - docker push $DOCKERHUB_DEMOCRASHED:$CI_COMMIT_SHA

demo-crashed-deploy:
  stage: test-demo-crashed
  script:
    # Make sure that we know where our docker image is at
    - export KF_DOCKER_IMAGE=$DOCKERHUB_DEMOCRASHED:$CI_COMMIT_SHA

    # Dployment configuration
    - export GCP_PROJECT="grwdt-dev"
    - export GCP_ZONE="australia-southeast1-a"
    - export KFAPP="kf-crashed"

    - export K8S_NAMESPACE=kubeflow
    - export K8S_CLUSTER="kf-crashed"
    - export GOOGLE_APPLICATION_CREDENTIALS=./kubeflow_ci_svcacc.json
    - echo "$KUBEFLOW_CI_SVCACC" > ./kubeflow_ci_svcacc.json
    - gcloud container clusters get-credentials $KFAPP --zone $GCP_ZONE --project $GCP_PROJECT

    # Do the actual deployment to Kubeflow to make sure everything works as expected
    - crashed deploy-pipeline --pipeline-yaml=crashed_pipeline.yml --host $KFP_HOST --client-id $KFP_CLIENT_ID --namespace $KFP_NAMESPACE

###############################################################
###  RELEASE
###############################################################
push-dockerhub-app:
  stage: release
  dependencies:
    - build-image-hyper-model
  when: manual
  # only:
  #   - release/*
  script:
    # Login to dockerhub
    - docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD docker.io
    # Pull the image I built during  `build-image-hyper-model` and re-tag it
    - docker pull $IMAGE_GCR_HYPERMODEL:$CI_COMMIT_REF_SLUG
    - docker tag $IMAGE_GCR_HYPERMODEL:$CI_COMMIT_REF_SLUG $IMAGE_DOCKERHUB_HYPERMODEL
    - docker tag $IMAGE_GCR_HYPERMODEL:$CI_COMMIT_REF_SLUG $IMAGE_DOCKERHUB_HYPERMODEL:$VERSION
    # Push my images, both as a version and as the latest
    - docker push $IMAGE_DOCKERHUB_HYPERMODEL
    - docker push $IMAGE_DOCKERHUB_HYPERMODEL:$VERSION

push-pip:
  stage: release
  dependencies:
    - build-image-hyper-model
  when: manual
  # only:
  #   - release/*
  script:
    # Update HyperModel since we make lots of changes to it
    - pip install -e ./src/hyper-model
    - python publish_pip.py

#######################################
####  INFRA
#######################################
image-hypermodel-base:
  stage: release
  when: manual
  only:
    - release/*
  script:
    - echo "Building..."
    - docker build -t $IMAGE_DOCKERHUB_HYPERMODEL_BASE:alpine-$VERSION -f ./infra/docker/hypermodel-base.Dockerfile ./infra/docker
    - docker push $IMAGE_DOCKERHUB_HYPERMODEL_BASE:alpine-$VERSION

image-hypermodel-cicd-gitlab:
  stage: release
  when: manual
  # only:
  #   - release/*
  script:
    - echo "Building..."
    - docker build -t $IMAGE_DOCKERHUB_HYPERMODEL_CICD:gitlab-$VERSION -f ./infra/docker/hypermodel-cicd-gitlab.Dockerfile ./infra/docker
    - docker push $IMAGE_DOCKERHUB_HYPERMODEL_CICD:gitlab-$VERSION
